package com.fullstack.mystore.controller;

import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fullstack.mystore.entity.Product;
import com.fullstack.mystore.repository.ProductCategoryBrandRepository;
import com.fullstack.mystore.repository.ProductCategoryPurposeRepository;
import com.fullstack.mystore.repository.ProductRepository;


@RestController
public class ProductController {
	
	private ProductRepository productRepository;
	
	private ProductCategoryBrandRepository productCategoryBrandRepository;
	
	private ProductCategoryPurposeRepository productCategoryPurposeRepository;
	
	
	public ProductController(ProductRepository productRepository,ProductCategoryBrandRepository productCategoryBrandRepository,ProductCategoryPurposeRepository productCategoryPurposeRepository) {
		super();
		this.productRepository = productRepository;
		this.productCategoryBrandRepository = productCategoryBrandRepository;
		this.productCategoryPurposeRepository = productCategoryPurposeRepository;
	}


	@GetMapping("home/product")
	public List<Product> allProduct() {
		return productRepository.findAll();
	}
	
	@GetMapping("home/product/{id}")
	public List<Product> getProductById(@PathVariable int id) {
		return productRepository.findProductById(id);
	}
	
	//http://localhost:8080/home/product/by-brand?brandId=1
	@GetMapping("home/product/brand")
	public List<Product> getProductByBrand(@RequestParam int brandId) {
		return productRepository.findByProductCategoryBrand_Id(brandId);
	}
	//http://localhost:8080/home/product/by-purpose?purposeId=1
	@GetMapping("home/product/purpose")
	public List<Product> getProductByPurpose(@RequestParam int purposeId) {
		return productRepository.findByProductCategoryBrandPurposes_ProductCategoryPurpose_Id(purposeId);
	}
	
	@GetMapping("home/product/brad-and-purpose")
	public List<Product> getProductByBrandandPurpose(@RequestParam int brandId, @RequestParam int purposeId) {
		return productRepository.findByProductCategoryBrand_IdAndProductCategoryBrandPurposes_ProductCategoryPurpose_Id(brandId,purposeId);
	}
	
		
	
}
