package com.fullstack.mystore.controller;

import java.time.LocalDateTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fullstack.mystore.dto.CheckoutRequest;
import com.fullstack.mystore.dto.itemOrderDTO;
import com.fullstack.mystore.entity.OrderItem;
import com.fullstack.mystore.entity.Payment;
import com.fullstack.mystore.entity.Product;
import com.fullstack.mystore.entity.ShopOrder;
import com.fullstack.mystore.entity.User;
import com.fullstack.mystore.enums.OrderStatus;
import com.fullstack.mystore.repository.OrderItemRepository;
import com.fullstack.mystore.repository.PaymentRepository;
import com.fullstack.mystore.repository.ProductRepository;
import com.fullstack.mystore.repository.ShopOrderRepository;
import com.fullstack.mystore.repository.UserRepository;

import io.swagger.v3.oas.annotations.parameters.RequestBody;

@RestController
@RequestMapping("/checkout")
public class CheckoutController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ShopOrderRepository shopOrderRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private OrderItemRepository orderItemRepository;

    @Autowired
    private PaymentRepository paymentRepository;

    public CheckoutController(UserRepository userRepository, ShopOrderRepository shopOrderRepository,
                              ProductRepository productRepository, OrderItemRepository orderItemRepository,
                              PaymentRepository paymentRepository) {
        super();
        this.userRepository = userRepository;
        this.shopOrderRepository = shopOrderRepository;
        this.productRepository = productRepository;
        this.orderItemRepository = orderItemRepository;
        this.paymentRepository = paymentRepository;
    }

    // Chỉnh sửa phương thức checkout để nhận userId từ URL
    @PostMapping("/{userId}")
    public ResponseEntity<String> checkout(@PathVariable("userId") Integer userId, @RequestBody CheckoutRequest checkoutRequest) {
        // 1. Kiểm tra user
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            return ResponseEntity.badRequest().body("User not found");
        }

        // 2. Kiểm tra items có null hoặc rỗng không
        if (checkoutRequest.getItems() == null || checkoutRequest.getItems().isEmpty()) {
            return ResponseEntity.badRequest().body("Order must contain at least one item.");
        }

        // 3. Tạo đơn hàng
        ShopOrder shopOrder = new ShopOrder();
        shopOrder.setDateOrder(LocalDateTime.now());
        shopOrder.setTotalPrice(checkoutRequest.getTotal() != null ? checkoutRequest.getTotal() : 0.0);
        shopOrder.setStatusOrder(OrderStatus.PENDING);
        shopOrder.setShippingStatus("Not Shipped");
        shopOrder.setPaymentMethod(checkoutRequest.getPaymentMethod());
        shopOrder.setPaymentStatus("Pending");
        shopOrder.setUser(user);
        shopOrderRepository.save(shopOrder);

        // 4. Lưu OrderItem vào database
        double totalAmount = 0;
        for (itemOrderDTO item : checkoutRequest.getItems()) { // Không còn lỗi null
            Product product = productRepository.findById(item.getProductId()).orElse(null);
            if (product != null) {
                OrderItem orderItem = new OrderItem();
                orderItem.setProduct(product);
                orderItem.setQuantity(item.getQuantity());
                orderItem.setPrice(product.getPrice());
                orderItem.setShopOrder(shopOrder);
                orderItemRepository.save(orderItem);

                totalAmount += product.getPrice() * item.getQuantity();
            }
        }

        // 5. Cập nhật tổng tiền
        shopOrder.setTotalPrice(totalAmount);
        shopOrderRepository.save(shopOrder);

        // 6. Lưu Payment
        Payment payment = new Payment();
        payment.setDatePayment(LocalDateTime.now());
        payment.setMethodPayment(checkoutRequest.getPaymentMethod());
        payment.setPaymentStatus("Pending");
        payment.setUser(user);
        payment.setShopOrder(shopOrder);
        paymentRepository.save(payment);

        return ResponseEntity.ok("Order placed successfully.");
    }


}
